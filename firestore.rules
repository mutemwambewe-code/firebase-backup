rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles. Only the user
     *   with the matching `userId` can read or write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their profile at /users/user_abc.
     * @allow (get, update, delete) - User with UID 'user_abc' can read, update, or delete their profile at /users/user_abc.
     * @deny (create, get, update, delete) - User with UID 'user_xyz' cannot access /users/user_abc.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for units. Only the user
     *   with the matching `userId` can read or write units under their profile.
     * @path /users/{userId}/units/{unitId}
     * @allow (create) - User with UID 'user_abc' can create a unit at /users/user_abc/units/unit_123.
     * @allow (get, update, delete) - User with UID 'user_abc' can read, update, or delete their unit at /users/user_abc/units/unit_123.
     * @deny (create, get, update, delete) - User with UID 'user_xyz' cannot access /users/user_abc/units/unit_123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/units/{unitId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for tenants. Only the user
     *   with the matching `userId` can read or write tenants under their profile.
     * @path /users/{userId}/tenants/{tenantId}
     * @allow (create) - User with UID 'user_abc' can create a tenant at /users/user_abc/tenants/tenant_123.
     * @allow (get, update, delete) - User with UID 'user_abc' can read, update, or delete their tenant at /users/user_abc/tenants/tenant_123.
     * @deny (create, get, update, delete) - User with UID 'user_xyz' cannot access /users/user_abc/tenants/tenant_123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/tenants/{tenantId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}