rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Root-level read protection. No direct reads allowed.
     * @path /
     * @allow (get, list) if false - no one can read root
     * @deny (create, update, delete) - no one can write to the root.
     * @principle Root level protection.
     */
    match /{document=**} {
        allow read: if false;
      allow write: if false;
    }

    // Helper function to check if the authenticated user's UID matches the requested user ID.
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    //Helper function to check if the document exists and the authenticated user's UID matches the requested user ID.
    function isExistingOwner(userId) {
      return isOwner(userId) && exists(resource);
    }

    //Helper function to determine is signed in
    function isSignedIn() {
        return request.auth != null;
    }

    /**
     * @description Secures the /users/{userId}/properties/{propertyId} collection.
     * @path /users/{userId}/properties/{propertyId}
     * @allow (create) User AUvNYg10hoXIAkcBxgsnsPnBzYo1 can create if they are logged in and {userId} == request.auth.uid.
     * @allow (get, list) User AUvNYg10hoXIAkcBxgsnsPnBzYo1 can read if they are logged in and {userId} == request.auth.uid.
     * @allow (update, delete) User AUvNYg10hoXIAkcBxgsnsPnBzYo1 can update/delete if they are logged in and {userId} == request.auth.uid and the document exists.
     * @deny (create) User with mismatched userId attempts to create.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/properties/{propertyId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secures the /users/{userId}/tenants/{tenantId} collection.
     * @path /users/{userId}/tenants/{tenantId}
     * @allow (create) User AUvNYg10hoXIAkcBxgsnsPnBzYo1 can create if they are logged in and {userId} == request.auth.uid.
     * @allow (get, list) User AUvNYg10hoXIAkcBxgsnsPnBzYo1 can read if they are logged in and {userId} == request.auth.uid.
     * @allow (update, delete) User AUvNYg10hoXIAkcBxgsnsPnBzYo1 can update/delete if they are logged in and {userId} == request.auth.uid and the document exists.
     * @deny (create) User with mismatched userId attempts to create.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/tenants/{tenantId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secures the /users/{userId}/messagelogs/{messagelogId} collection.
     * @path /users/{userId}/messagelogs/{messagelogId}
     * @allow (create) User AUvNYg10hoXIAkcBxgsnsPnBzYo1 can create if they are logged in and {userId} == request.auth.uid.
     * @allow (get, list) User AUvNYg10hoXIAkcBxgsnsPnBzYo1 can read if they are logged in and {userId} == request.auth.uid.
     * @allow (update, delete) User AUvNYg10hoXIAkcBxgsnsPnBzYo1 can update/delete if they are logged in and {userId} == request.auth.uid and the document exists.
     * @deny (create) User with mismatched userId attempts to create.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/messagelogs/{messagelogId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

        /**
     * @description Secures the /users/{userId}/templates/{templateId} collection.
     * @path /users/{userId}/templates/{templateId}
     * @allow (create) User AUvNYg10hoXIAkcBxgsnsPnBzYo1 can create if they are logged in and {userId} == request.auth.uid.
     * @allow (get, list) User AUvNYg10hoXIAkcBxgsnsPnBzYo1 can read if they are logged in and {userId} == request.auth.uid.
     * @allow (update, delete) User AUvNYg10hoXIAkcBxgsnsPnBzYo1 can update/delete if they are logged in and {userId} == request.auth.uid and the document exists.
     * @deny (create) User with mismatched userId attempts to create.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/templates/{templateId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}